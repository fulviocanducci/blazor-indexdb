@page "/jobs"
@inject RepositoryJobImpl Repository;
@using WebApplication1.Models
@using WebApplication1.DataAccess
<h3>Jobs</h3>
<div class="row">
    <div class="col-md-8 mt-2">
        <input type="text" @bind-value="Description" @onkeyup="@(async(e) => await HandlerKeyUpAsync(e))" class="form-control" />
    </div>
    <div class="col-md-4 mt-2">
        <button @onclick="@(async() => await AddJobDescriptionAsync())" class="btn btn-outline-primary btn-block">Add</button>
    </div>
</div>
<div>
    @if (Results == null)
    {
        <Loading />
    }
    else
    {
        <div class="btn-group btn-group-toggle mt-4" data-toggle="buttons">
            <label class="@GetCssDoneTextStatus(DoneTextStatus=="all")">
                <input type="radio" name="options" id="option1" autocomplete="off" @onclick="@(async(args) => await SetDoneTextStatusAsync("all"))" checked=@(DoneTextStatus=="all") /> All
            </label>
            <label class="@GetCssDoneTextStatus(DoneTextStatus=="done")">
                <input type="radio" name="options" id="option2" autocomplete="off" @onclick="@(async(args) => await SetDoneTextStatusAsync("done"))" checked=@(DoneTextStatus=="done") /> Done
            </label>
            <label class="@GetCssDoneTextStatus(DoneTextStatus=="wait")">
                <input type="radio" name="options" id="option3" autocomplete="off" @onclick="@(async(args) => await SetDoneTextStatusAsync("wait"))" checked=@(DoneTextStatus=="wait") /> Wait
            </label>
        </div>
        <div class="list-group mt-4">
            @foreach (var result in Results)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    @result.Description
                    <span class="form-check form-check-inline">
                        <button class=@(@result.Done==0?"btn btn-success":"btn btn-info") 
                                disabled="@(result.Done == 1)"
                                @onclick="@(async() => await SetJobDoneAsync(result))">
                            @(@result.Done == 1 ? "Done" : "Wait")
                        </button>
                    </span>
                </div>
            }
        </div>
    }
</div>

@code {
    string Description { get; set; }
    IList<Job> Results { get; set; }
    //bool? DoneStatus { get; set; }
    string DoneTextStatus = "all";

    protected override async Task OnInitAsync()
    {
        await LoadJobListAsync();
    }

    async Task SetDoneTextStatusAsync(string status)
    {
        DoneTextStatus = status;
        await LoadJobListAsync();
    }

    async Task LoadJobListAsync()
    {
        int? done = null;
        if (DoneTextStatus == "done")
        {
            done = 1;
        }
        else if (DoneTextStatus == "wait")
        {
            done = 0;
        }
        if (done == null)
        {
            Results = await Repository.AllAsync();
        }
        else
        {
            Results = await Repository.AllDoneAsync(done.Value);
        }
    }

    async Task SetJobDoneAsync(Job job)
    {
        job.Done = 1;
        Repository.Update(job);
        await LoadJobListAsync();
        StateHasChanged();
    }

    async Task AddJobDescriptionAsync()
    {
        if (!string.IsNullOrEmpty(Description))
        {
            var job = new Job()
            {
                Description = Description,
                Done = 0
            };
            Repository.Add(job);
            await LoadJobListAsync();
            Description = string.Empty;
        }
    }

    async Task HandlerKeyUpAsync(UIKeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await AddJobDescriptionAsync();
        }
    }

    string GetCssDoneTextStatus(bool status)
    {
        return status ? "btn btn-secondary active" : "btn btn-secondary";
    }
}
